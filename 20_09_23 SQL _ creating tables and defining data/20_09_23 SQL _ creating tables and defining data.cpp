/*
creating tables and defining data (создание таблиц и определение данных)

......................Точные числовые значения ..................
digint min - (-9223372036854775808) max (9223372036854775808)

decimal numeric - Денежные единици хранить нельзя. (потеря числ после запятой)

Хранение денежных едениц нужно в типе moune

...........................Неточные числовые значения.....................

Float min(-1.79E+308) max(1.79E+308)
Real min(-3.40E+38)    max(3.40E+38)
 
 Float Флоат больше в SQL чем в С++

 .................Время и даты.................

 date - Дневная точность

 datetimeeoffset - Наносекундная точность

 datetime2 -  Наносекундная точность

 time - Наносекундная точность 00:00:00.0000000


 ................Текстовые значения.............
  Нужна если передается в языко зависимых кодировках.
  Или когда всю базу данных хранить все в одной кодировке.
  Все они для однобайтовых кодировок.

  Понимать разницу . Есь Char от числа это (n|8000) 8000 байт -Это если писать со скобками.
  Без скобок это 1 байт

  varchar(max) - Это Это не ограниченной длинны 2 в 31 степени) - Картинки хранить допустим.
  Это просто последовательность байтов и в виде масива знаков запихивается в базу.
  Если храним ссылку на текст то это гораздо лучше.

  jpeg для восстановления крайне тяжело ВОсстанавливаются) - Р сейвер из файловой системы восстановить (В лучшем случае миниатюру)
  Лучше восстанавливаются не зжатые файлы.

  text Ограничен символами 

  varbinari (n|80000) - Двоичные данные не фиксированной длинныограниченны 8000 символами
  binari (n|80000) - Двоичные данные фиксированной длинны ограничены 8000 символами.

  image - Двоичные данные нефиксированной длинны  ограничено максимальными символами 2.147.485.524

  ................... Особые типы данных.........................

  Использование в сфере Биг Дата если в одной базе информация храниться в одном типе char
  в другой эта же инфа в другом типе. varchar В третем в другом виде.
  То в SQL variant  Это нормальное состояние. 

  SQL variant  - Хранит различные поддерживаемые сервером типы данных За исключением (text, ntext)

  timestemp - Хранит метку времени, Которая изменяется при добавлении или изменении.
  uniqueidentifile -  Хранит уникальный идентификатор.

  xml - Хранит человекопонятные типы данных (Бинарные данные сохранить в тексточитаемом формате) которые можно считать
  или пердать допустим.

  ..............
  XML (расширяемый язык разметки) - это основанный на тексте язык разметки, который описывает данные. 
  Он используется для создания документов и обмена информацией
  между различными системами и приложениями. XML является одним из основных стандартов в области разработки
  веб-приложений и сервисов.
  ............
  cursor - Это конкретная ячейка таблицы в которой мы находимся (Можем ее запомнить)- Не может быть полем для таблици.(Можно работат функциями)

  tablе - Хранит таблицу. Когда создали таблицу мы гвоздями прибили в базу данных но можно с места на место ее перекинуть)
  Но таблица не может быть полями для таблици 

  .............. Таблицы и правила как с ними работать................

  Соддание базы занных использоват команду use 

  Мастером (помошником) с большими базами данными лучше не работать. 

  PRIMARY KEY- (one or more collumns) -  Сначало -------- Создаем колонки ----------какую строчку считать ключем.
  Важно создавать первичный ключь (По нему создается первычный индекс таблици) 

  Затем создаем Строчки  Можно если обязательно надо чтобы клиент не ввел ИМЯ то мы не дадим работать дальше.
  И создаем ключь По Строкам.

  Дубли в ключах запрещены()

  ..... Создание ограниченний..............

  CONSTRAINT Имя CHECK (AGE>=18 ADD name = 'Gleb')- свойство таблици (Можно Именовать) - Внешние CONSTRAINT могут перечислять любые поля9 Это если после ключа в нее напишем PRIMARY KEY

  Если мы CONSTRAINT в нутри то работать только со строчкой. 

  Тригеры -  то что срабатывает по событию(Автоматический переключатель)

  ............ Изменения таблици в случаях изменения базы данных......
  Изменение состава таблици (Все что угодно) 
  ALTER TABLE - ключевое слово для изменения.


  ....................................
  ..................................
  В базе данных надо стремиться чтобы небыло дублирующей информации. Надо работать сначало так чтобы причасать БД до приличного вида.
  Это структура , связи , Таблици)

  Правила кода - Это что надо делать чтобы создат СУБД.
   GO - Это мы разделяем каждую команду на подкоманды для выполнения
   (она пытаетя выполнить 1 команду потом вторую потом третью - пока не запнется.)
   Если его не писать СУБД отменит весь скрипт просто.
   CREATE DATABASE - Создание базы данных
   GO

   USE имя БД - Используем затем GO
   GO

   CREATE DATABASE custmer(
   id INT IDENTITY(1,1),
   ...
   ...
   )
   ..............
   Данный код на языке SQL представляет создание новой базы данных с именем "customer".
   Он определяет таблицу с идентификатором "id", который автоматически увеличивается на 1 с каждой новой записью.
   В остальной части кода могут быть определены дополнительные столбцы и их типы данных для данной таблицы.
   Это только начальная часть создания базы данных и таблицы, и другие детали остаются опущенными ("..." в коде).
   ................

   /*
■ Идентификатор (Id). Уникальный идентификатор отделения.
▷
▷ Авто приращение.
▷ Не может содержать null-значения
▷ Первичный ключ.
: название обследования, день недели, в который оно проводится,
а также время начала и завершения.

<> - Это тоесть не равни(!=) Это значит не может быть 0.(Нулем)
"" - Это экранирование что это не системное поле (Тоесть не служебное слово)
'' - Это литералы Выделяют блок текста
IDENTITY - это приращение
-- это однострочный комментарий
Менеджемент студио свойство = Свойство текстового редактора. -
Помощь в написании кода.

 USE Hospital; - РАБОТА С БАЗОЙ ДАННЫХ ПО УМОЛЧАНИЮ

*/

/*
CREATE DATABASE Hospital;
GO
--USE Hospital;

CREATE TABLE Examinations(

	nameExaminate VARCHAR(50) PRIMARY KEY,
	day_week DATE,
	timeStart SMALLDATETIME,
	timeEnd SMALLDATETIME,
	);

CREATE TABLE Doctors(

);

id INT NOT NULL IDENTITY(1, 1) PRIMARY KEY UNIQUE,
age INT NOT NULL CONSTREINT CHK_custjmer CHECK(age < "" AND age < 300),
	...
	GO














*/